File Name: index.html
Full Path: /Users/mac/WebstormProjects/faster_shoes2/index.html

<!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <link rel="icon" type="image/svg+xml" href="/vite.svg" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta name="impact-site-verification" value="1f5c7d68-5505-492c-b924-290ee40d5231" />
  <title>Faster Shoes</title>

  <!-- Google Tag Manager via separate file -->
  <!-- @vite-ignore -->
  <script src="/gtm.js"></script>
  <!-- End Google Tag Manager -->
</head>
<body>
<!-- @vite-ignore -->
<noscript>
  <iframe
          src="https://www.googletagmanager.com/ns.html?id=GTM-TQHCPFSZ"
          height="0"
          width="0"
          style="display:none;visibility:hidden"
  ></iframe>
</noscript>

<div id="root"></div>
<script type="module" src="/src/main.tsx"></script>
</body>
</html>
=====

File Name: tailwind.config.js
Full Path: /Users/mac/WebstormProjects/faster_shoes2/tailwind.config.js

/** @type {import('tailwindcss').Config} */
export default {
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {},
  },
  plugins: [],
};
=====

File Name: eslint.config.js
Full Path: /Users/mac/WebstormProjects/faster_shoes2/eslint.config.js

import js from '@eslint/js';
import globals from 'globals';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';
import tseslint from 'typescript-eslint';

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  }
);
=====

File Name: vite.config.ts
Full Path: /Users/mac/WebstormProjects/faster_shoes2/vite.config.ts

import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  base: '/erich/',
  plugins: [react()],
  optimizeDeps: {
    exclude: ['lucide-react'],
  },
  build: {
    outDir: 'dist',
    assetsDir: 'assets',
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['react', 'react-dom'],
          icons: ['lucide-react']
        }
      }
    }
  }
});
=====

File Name: postcss.config.js
Full Path: /Users/mac/WebstormProjects/faster_shoes2/postcss.config.js

export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};
=====

File Name: gtm.js
Full Path: /Users/mac/WebstormProjects/faster_shoes2/public/gtm.js

(function(w, d, s, l, i) {
  w[l] = w[l] || [];
  w[l].push({
    'gtm.start': new Date().getTime(),
    event: 'gtm.js'
  });
  var f = d.getElementsByTagName(s)[0],
      j = d.createElement(s),
      dl = l !== 'dataLayer' ? '&l=' + l : '';
  j.async = true;
  j.src = 'https://www.googletagmanager.com/gtm.js?id=' + i + dl;
  f.parentNode.insertBefore(j, f);
})(window, document, 'script', 'dataLayer', 'GTM-TQHCPFSZ');
=====

File Name: App.tsx
Full Path: /Users/mac/WebstormProjects/faster_shoes2/src/App.tsx

/**
 * File Name: App.tsx
 * Full Path: /Users/mac/WebstormProjects/faster_shoes2/src/App.tsx
 */
import React, { useEffect } from 'react';
import {
    BrowserRouter as Router,
    Routes,
    Route,
    Navigate,
    useLocation
} from 'react-router-dom';
import Navbar from './components/Navbar';
import Footer from './components/Footer';
import Home from './pages/Home';
import Mens from './pages/Mens';
import Womens from './pages/Womens';
import Sale from './pages/Sale';
import CartPage from './pages/CartPage';
import CheckoutPage from './pages/CheckoutPage';
import CheckoutSuccess from './pages/CheckoutSuccess';
import ProductPage from './pages/ProductPage';
import { CartProvider } from './context/CartContext';

function App() {
    return (
        <Router basename="/erich">
            <CartProvider>
                <div className="min-h-screen bg-gray-50 flex flex-col">
                    <Navbar />
                    <main className="flex-grow">
                        <AppRoutes />
                    </main>
                    <Footer />
                </div>
            </CartProvider>
        </Router>
    );
}

export default App;

function AppRoutes() {
    const location = useLocation();

    // Capture ?irclickid on any route
    useEffect(() => {
        const params = new URLSearchParams(location.search);
        const cid = params.get('irclickid');
        if (cid) {
            localStorage.setItem('irclickid', cid);
        }
    }, [location]);

    return (
        <Routes>
            <Route path="/" element={<Home />} />
            <Route path="/mens" element={<Mens />} />
            <Route path="/womens" element={<Womens />} />
            <Route path="/sale" element={<Sale />} />
            <Route path="/cart" element={<CartPage />} />
            <Route path="/checkout" element={<CheckoutPage />} />
            <Route path="/checkoutSuccess" element={<CheckoutSuccess />} />
            <Route path="/product/:productId" element={<ProductPage />} />
            <Route path="*" element={<Navigate to="/" replace />} />
        </Routes>
    );
}

// <script type="text/javascript"> (function(a,b,c,d,e,f,g){e['ire_o']=c;e[c]=e[c]||function(){(e[c].a=e[c].a||[]).push(arguments)};f=d.createElement(b);g=d.getElementsByTagName(b)[0];f.async=1;f.src=a;g.parentNode.insertBefore(f,g);})('https://utt.impactcdn.com/A6033180-002e-43c2-b298-8782ae72cffc65535.js','script','ire',document,window); ire('identify', {customerid: '' /*INSERT CUSTOMER ID*/, customeremail: '' /*INSERT SHA1 HASHED CUSTOMER EMAIL*/}); </script>
=====

File Name: main.tsx
Full Path: /Users/mac/WebstormProjects/faster_shoes2/src/main.tsx

import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App.tsx';
import './index.css';

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>
);
=====

File Name: index.css
Full Path: /Users/mac/WebstormProjects/faster_shoes2/src/index.css

@tailwind base;
@tailwind components;
@tailwind utilities;
=====

File Name: vite-env.d.ts
Full Path: /Users/mac/WebstormProjects/faster_shoes2/src/vite-env.d.ts

/// <reference types="vite/client" />
=====

File Name: CartContext.tsx
Full Path: /Users/mac/WebstormProjects/faster_shoes2/src/context/CartContext.tsx

import React, { createContext, useContext, useState, useEffect } from 'react';

interface CartItem {
  id: string;
  name: string;
  price: string;
  image: string;
  quantity: number;
}

interface CartContextType {
  cart: CartItem[];
  addToCart: (item: Omit<CartItem, 'quantity'>) => void;
  removeFromCart: (id: string) => void;
  updateQuantity: (id: string, quantity: number) => void;
  clearCart: () => void;
  cartTotal: number;
  itemCount: number;
  isInCart: (id: string) => boolean;
  getItemQuantity: (id: string) => number;
  processCheckout: () => void;
}

const CartContext = createContext<CartContextType | undefined>(undefined);

export function CartProvider({ children }: { children: React.ReactNode }) {
  const [cart, setCart] = useState<CartItem[]>([]);
  const [itemCount, setItemCount] = useState(0);
  const [cartTotal, setCartTotal] = useState(0);

  // Load cart from localStorage on initial render
  useEffect(() => {
    const savedCart = localStorage.getItem('cart');
    if (savedCart) {
      setCart(JSON.parse(savedCart));
    }
  }, []);

  // Save cart to localStorage whenever it changes
  useEffect(() => {
    localStorage.setItem('cart', JSON.stringify(cart));
    
    // Update cart totals
    const count = cart.reduce((sum, item) => sum + item.quantity, 0);
    setItemCount(count);
    
    const total = cart.reduce((sum, item) => {
      const price = parseFloat(item.price.replace('$', ''));
      return sum + (price * item.quantity);
    }, 0);
    setCartTotal(total);
  }, [cart]);

  const addToCart = (item: Omit<CartItem, 'quantity'>) => {
    setCart(currentCart => {
      const existingItem = currentCart.find(cartItem => cartItem.id === item.id);
      
      if (existingItem) {
        return currentCart.map(cartItem =>
          cartItem.id === item.id
            ? { ...cartItem, quantity: cartItem.quantity + 1 }
            : cartItem
        );
      }
      
      return [...currentCart, { ...item, quantity: 1 }];
    });
  };

  const removeFromCart = (id: string) => {
    setCart(currentCart => currentCart.filter(item => item.id !== id));
  };

  const updateQuantity = (id: string, quantity: number) => {
    if (quantity < 1) return;
    
    setCart(currentCart =>
      currentCart.map(item =>
        item.id === id ? { ...item, quantity } : item
      )
    );
  };

  const clearCart = () => {
    setCart([]);
  };

  const isInCart = (id: string) => {
    return cart.some(item => item.id === id);
  };

  const getItemQuantity = (id: string) => {
    const item = cart.find(item => item.id === id);
    return item ? item.quantity : 0;
  };

  const processCheckout = () => {
    // In a real application, this would integrate with a payment processor
    const orderSummary = {
      items: cart,
      total: cartTotal,
      date: new Date().toISOString(),
      orderId: Math.random().toString(36).substr(2, 9)
    };

    // Log the order (in a real app, this would go to a backend)
    console.log('Order processed:', orderSummary);

    // Clear the cart after successful checkout
    clearCart();

    // Return order summary for confirmation
    return orderSummary;
  };

  return (
    <CartContext.Provider value={{
      cart,
      addToCart,
      removeFromCart,
      updateQuantity,
      clearCart,
      cartTotal,
      itemCount,
      isInCart,
      getItemQuantity,
      processCheckout
    }}>
      {children}
    </CartContext.Provider>
  );
}

export function useCart() {
  const context = useContext(CartContext);
  if (context === undefined) {
    throw new Error('useCart must be used within a CartProvider');
  }
  return context;
}
=====

File Name: Cart.tsx
Full Path: /Users/mac/WebstormProjects/faster_shoes2/src/components/Cart.tsx

import React, { useState } from 'react';
import { X, Plus, Minus, CreditCard } from 'lucide-react';
import { useCart } from '../context/CartContext';

interface CartProps {
  isOpen: boolean;
  onClose: () => void;
}

const Cart = ({ isOpen, onClose }: CartProps) => {
  const { cart, removeFromCart, updateQuantity, cartTotal, itemCount, processCheckout } = useCart();
  const [isProcessing, setIsProcessing] = useState(false);
  const [orderComplete, setOrderComplete] = useState(false);

  if (!isOpen) return null;

  const handleCheckout = () => {
    setIsProcessing(true);
    setTimeout(() => {
      try {
        processCheckout();
        setOrderComplete(true);
      } catch (error) {
        console.error('Checkout failed:', error);
      } finally {
        setIsProcessing(false);
      }
    }, 1500); // Simulate processing time
  };

  if (orderComplete) {
    return (
      <div className="fixed inset-0 z-50 overflow-hidden">
        <div className="absolute inset-0 bg-black bg-opacity-50" onClick={onClose} />
        <div className="absolute right-0 top-0 h-full w-full max-w-md bg-white shadow-xl">
          <div className="flex h-full flex-col items-center justify-center p-8 text-center">
            <div className="mb-6 text-green-500">
              <svg className="h-16 w-16 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
              </svg>
            </div>
            <h2 className="text-2xl font-bold mb-4">Order Complete!</h2>
            <p className="text-gray-600 mb-8">Thank you for your purchase.</p>
            <button
              onClick={onClose}
              className="bg-blue-600 text-white px-8 py-3 rounded-md hover:bg-blue-700 transition"
            >
              Continue Shopping
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="fixed inset-0 z-50 overflow-hidden">
      <div className="absolute inset-0 bg-black bg-opacity-50" onClick={onClose} />
      
      <div className="absolute right-0 top-0 h-full w-full max-w-md bg-white shadow-xl">
        <div className="flex h-full flex-col">
          <div className="flex items-center justify-between border-b px-4 py-3">
            <h2 className="text-lg font-semibold">Shopping Cart ({itemCount} items)</h2>
            <button onClick={onClose} className="p-2">
              <X className="h-5 w-5" />
            </button>
          </div>

          <div className="flex-1 overflow-y-auto p-4">
            {cart.length === 0 ? (
              <p className="text-center text-gray-500">Your cart is empty</p>
            ) : (
              <div className="space-y-4">
                {cart.map((item) => (
                  <div key={item.id} className="flex items-center space-x-4 border-b pb-4">
                    <img src={item.image} alt={item.name} className="h-20 w-20 object-cover rounded" />
                    <div className="flex-1">
                      <h3 className="font-semibold">{item.name}</h3>
                      <p className="text-gray-600">{item.price}</p>
                      <div className="mt-2 flex items-center space-x-2">
                        <button
                          onClick={() => updateQuantity(item.id, item.quantity - 1)}
                          className="p-1 hover:bg-gray-100 rounded"
                        >
                          <Minus className="h-4 w-4" />
                        </button>
                        <span>{item.quantity}</span>
                        <button
                          onClick={() => updateQuantity(item.id, item.quantity + 1)}
                          className="p-1 hover:bg-gray-100 rounded"
                        >
                          <Plus className="h-4 h-4" />
                        </button>
                      </div>
                    </div>
                    <button
                      onClick={() => removeFromCart(item.id)}
                      className="p-2 hover:bg-gray-100 rounded"
                    >
                      <X className="h-5 w-5 text-gray-500" />
                    </button>
                  </div>
                ))}
              </div>
            )}
          </div>

          <div className="border-t p-4">
            <div className="mb-4 flex justify-between">
              <span className="font-semibold">Total:</span>
              <span className="font-semibold">${cartTotal.toFixed(2)}</span>
            </div>
            <button
              className={`w-full py-3 rounded-md transition flex items-center justify-center space-x-2 ${
                cart.length === 0
                  ? 'bg-gray-300 cursor-not-allowed'
                  : isProcessing
                  ? 'bg-blue-400 cursor-wait'
                  : 'bg-blue-600 hover:bg-blue-700'
              } text-white`}
              onClick={handleCheckout}
              disabled={cart.length === 0 || isProcessing}
            >
              {isProcessing ? (
                <>
                  <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                  <span>Processing...</span>
                </>
              ) : (
                <>
                  <CreditCard className="w-5 h-5" />
                  <span>Checkout</span>
                </>
              )}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Cart;
=====

File Name: Navbar.tsx
Full Path: /Users/mac/WebstormProjects/faster_shoes2/src/components/Navbar.tsx

import React from 'react';
import { ShoppingBag, Menu } from 'lucide-react';
import { Link, useLocation, useNavigate } from 'react-router-dom';
import { useCart } from '../context/CartContext';

const Navbar = () => {
  const { itemCount } = useCart();
  const location = useLocation();
  const navigate = useNavigate();

  const isActive = (path: string) => {
    return location.pathname === path;
  };

  return (
    <nav className="bg-white shadow-md sticky top-0 z-50">
      <div className="container mx-auto px-4">
        <div className="flex items-center justify-between h-16">
          <div className="flex items-center">
            <Menu className="h-6 w-6 md:hidden" />
            <Link to="/" className="ml-4 text-xl font-bold">Faster Shoes</Link>
          </div>

          <div className="hidden md:flex items-center space-x-8">
            <Link 
              to="/"
              className={`${isActive('/') ? 'text-blue-600' : 'text-gray-700'} hover:text-blue-600`}
            >
              Home
            </Link>
            <Link 
              to="/mens"
              className={`${isActive('/mens') ? 'text-blue-600' : 'text-gray-700'} hover:text-blue-600`}
            >
              Men
            </Link>
            <Link 
              to="/womens"
              className={`${isActive('/womens') ? 'text-blue-600' : 'text-gray-700'} hover:text-blue-600`}
            >
              Women
            </Link>
            <Link 
              to="/sale"
              className={`${isActive('/sale') ? 'text-blue-600' : 'text-gray-700'} hover:text-blue-600`}
            >
              Sale
            </Link>
          </div>

          <button 
            className="relative cursor-pointer"
            onClick={() => navigate('/cart')}
          >
            <ShoppingBag className="h-6 w-6 text-gray-600" />
            <span className="absolute -top-2 -right-2 bg-blue-600 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
              {itemCount}
            </span>
          </button>
        </div>
      </div>
    </nav>
  );
};

export default Navbar;
=====

File Name: AddToCartButton.tsx
Full Path: /Users/mac/WebstormProjects/faster_shoes2/src/components/AddToCartButton.tsx

import React from 'react';
import { ShoppingBag, Check } from 'lucide-react';
import { useCart } from '../context/CartContext';

interface AddToCartButtonProps {
  product: {
    id: string;
    name: string;
    price: string;
    image: string;
  };
}

const AddToCartButton = ({ product }: AddToCartButtonProps) => {
  const { addToCart, isInCart, getItemQuantity } = useCart();
  const quantity = getItemQuantity(product.id);
  const inCart = isInCart(product.id);

  return (
    <button 
      onClick={() => addToCart(product)}
      className={`mt-4 w-full py-2 rounded-md transition flex items-center justify-center space-x-2 ${
        inCart ? 'bg-green-600 hover:bg-green-700' : 'bg-blue-600 hover:bg-blue-700'
      } text-white`}
    >
      {inCart ? (
        <>
          <Check className="w-4 h-4" />
          <span>In Cart ({quantity})</span>
        </>
      ) : (
        <>
          <ShoppingBag className="w-4 h-4" />
          <span>Add to Cart</span>
        </>
      )}
    </button>
  );
};

export default AddToCartButton;
=====

File Name: Footer.tsx
Full Path: /Users/mac/WebstormProjects/faster_shoes2/src/components/Footer.tsx

import React from 'react';

const Footer = () => {
  return (
    <footer className="bg-gray-900 text-white">
      <div className="container mx-auto px-4 py-12">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          <div>
            <h3 className="text-lg font-semibold mb-4">Quick Links</h3>
            <ul className="space-y-2">
              <li><a href="#" className="text-gray-400 hover:text-white">About Us</a></li>
              <li><a href="#" className="text-gray-400 hover:text-white">Contact</a></li>
              <li><a href="#" className="text-gray-400 hover:text-white">Size Guide</a></li>
              <li><a href="#" className="text-gray-400 hover:text-white">FAQs</a></li>
            </ul>
          </div>

          <div>
            <h3 className="text-lg font-semibold mb-4">Customer Service</h3>
            <ul className="space-y-2">
              <li><a href="#" className="text-gray-400 hover:text-white">Shipping Info</a></li>
              <li><a href="#" className="text-gray-400 hover:text-white">Returns</a></li>
              <li><a href="#" className="text-gray-400 hover:text-white">Order Status</a></li>
              <li><a href="#" className="text-gray-400 hover:text-white">Payment Methods</a></li>
            </ul>
          </div>

          <div>
            <h3 className="text-lg font-semibold mb-4">Newsletter</h3>
            <p className="text-gray-400 mb-4">Subscribe to get special offers and updates</p>
            <div className="flex">
              <input
                type="email"
                placeholder="Enter your email"
                className="bg-gray-800 text-white px-4 py-2 rounded-l-md w-full"
              />
              <button className="bg-blue-600 px-6 py-2 rounded-r-md hover:bg-blue-700">
                Join
              </button>
            </div>
          </div>
        </div>
      </div>
    </footer>
  );
};

export default Footer;
=====

File Name: products.ts
Full Path: /Users/mac/WebstormProjects/faster_shoes2/src/data/products.ts

export interface Product {
  id: string;
  name: string;
  price: string;
  originalPrice?: string;
  image: string;
  category: string;
  description: string;
  features: string[];
  sizes: number[];
  colors: { name: string; hex: string }[];
  discount?: string;
}

export const products: Product[] = [
  {
    id: 'sprint-elite-x',
    name: "Sprint Elite X",
    price: "$129.99",
    image: "https://images.unsplash.com/photo-1539185441755-769473a23570",
    category: "Running",
    description: "Experience unparalleled speed and comfort with the Sprint Elite X. Engineered for serious runners, these shoes feature our latest cushioning technology and responsive design for maximum performance.",
    features: [
      "Lightweight mesh upper for breathability",
      "Responsive foam cushioning",
      "Durable rubber outsole",
      "Reinforced heel support",
      "Reflective details for visibility"
    ],
    sizes: [7, 7.5, 8, 8.5, 9, 9.5, 10, 10.5, 11, 11.5, 12],
    colors: [
      { name: "Ocean Blue", hex: "#1E3D59" },
      { name: "Volcanic Red", hex: "#FF1E1E" },
      { name: "Shadow Black", hex: "#2C2C2C" }
    ]
  },
  {
    id: 'air-comfort-pro',
    name: "Air Comfort Pro",
    price: "$159.99",
    image: "https://images.unsplash.com/photo-1551107696-a4b0c5a0d9a2",
    category: "Casual",
    description: "The Air Comfort Pro redefines casual footwear with its innovative air cushioning system. Perfect for all-day wear, these shoes combine style with unmatched comfort.",
    features: [
      "Premium leather upper",
      "Air cushioning technology",
      "Memory foam insole",
      "Flexible outsole design",
      "Moisture-wicking lining"
    ],
    sizes: [7, 7.5, 8, 8.5, 9, 9.5, 10, 10.5, 11, 11.5, 12],
    colors: [
      { name: "Classic White", hex: "#FFFFFF" },
      { name: "Midnight Navy", hex: "#141E30" },
      { name: "Desert Sand", hex: "#D2B48C" }
    ]
  },
  {
    id: 'trail-blazer',
    name: "Trail Blazer",
    price: "$189.99",
    image: "https://images.unsplash.com/photo-1542291026-7eec264c27ff",
    category: "Running",
    description: "Conquer any terrain with the Trail Blazer. Built for adventure, these shoes feature advanced grip technology and rugged construction while maintaining exceptional comfort.",
    features: [
      "Water-resistant upper",
      "Rock protection plate",
      "High-traction outsole",
      "Reinforced toe cap",
      "Quick-lace system"
    ],
    sizes: [7, 7.5, 8, 8.5, 9, 9.5, 10, 10.5, 11, 11.5, 12],
    colors: [
      { name: "Forest Green", hex: "#228B22" },
      { name: "Granite Gray", hex: "#676767" },
      { name: "Earth Brown", hex: "#8B4513" }
    ]
  }
];
=====

File Name: CheckoutPage.tsx
Full Path: /Users/mac/WebstormProjects/faster_shoes2/src/pages/CheckoutPage.tsx

import React, { useState } from 'react';
import { useCart } from '../context/CartContext';
import { useNavigate } from 'react-router-dom';

const CheckoutPage = () => {
  const { cart, cartTotal, processCheckout } = useCart();
  const navigate = useNavigate();

  // TOGGLE THIS to skip or require the form
  const SKIP_FORM = true;  // set to false if you want the user to fill out the form

  const [isProcessing, setIsProcessing] = useState(false);
  const [formData, setFormData] = useState({
    email: '',
    firstName: '',
    lastName: '',
    address: '',
    city: '',
    country: '',
    postalCode: '',
    cardNumber: '',
    expiryDate: '',
    cvv: ''
  });

  if (cart.length === 0) {
    navigate('/cart');
    return null;
  }

  const handleSubmit = async (e?: React.FormEvent) => {
    // If we are requiring the form, prevent default
    if (e) {
      e.preventDefault();
    }

    setIsProcessing(true);

    try {
      // Simulate some processing time
      await new Promise(resolve => setTimeout(resolve, 1500));

      // 1) Actually process checkout, get the real order data
      const orderSummary = processCheckout(); // logs order, clears cart

      // 2) Store the orderSummary in localStorage so we can read it on success page
      localStorage.setItem('orderSummary', JSON.stringify(orderSummary));

      // 3) Navigate to success
      navigate('/checkoutSuccess');
    } catch (error) {
      console.error('Checkout failed:', error);
    } finally {
      setIsProcessing(false);
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  if (SKIP_FORM) {
    // Quick-Checkout Mode: no form, just a button
    return (
        <div className="container mx-auto px-4 py-8">
          <h1 className="text-3xl font-bold mb-8">Quick Checkout</h1>
          <p className="text-gray-700 mb-4">
            This is a simplified checkout mode for testing. No address/payment info required.
          </p>

          <div className="bg-white p-6 rounded-lg shadow mb-8">
            <h2 className="text-xl font-semibold mb-4">Order Summary</h2>
            <div className="space-y-4 mb-4">
              {cart.map((item) => (
                  <div key={item.id} className="flex justify-between">
                <span>
                  {item.name} x {item.quantity}
                </span>
                    <span className="text-gray-600">{item.price}</span>
                  </div>
              ))}
            </div>
            <div className="border-t pt-4">
              <div className="flex justify-between font-semibold">
                <span>Total</span>
                <span>${cartTotal.toFixed(2)}</span>
              </div>
            </div>
          </div>

          <button
              disabled={isProcessing}
              onClick={() => handleSubmit()}
              className={`w-full py-3 rounded-md transition text-white flex items-center justify-center space-x-2 ${
                  isProcessing ? 'bg-blue-400 cursor-wait' : 'bg-blue-600 hover:bg-blue-700'
              }`}
          >
            {isProcessing ? (
                <>
                  <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                  <span>Processing...</span>
                </>
            ) : (
                <span>Complete Purchase</span>
            )}
          </button>
        </div>
    );
  }

  // NORMAL FORM MODE
  return (
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold mb-8">Checkout</h1>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* FORM */}
          <form onSubmit={handleSubmit} className="lg:col-span-2 space-y-6">
            <div className="bg-white p-6 rounded-lg shadow">
              <h2 className="text-xl font-semibold mb-4">Contact Information</h2>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700">Email</label>
                  <input
                      type="email"
                      name="email"
                      required
                      value={formData.email}
                      onChange={handleInputChange}
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                  />
                </div>
              </div>
            </div>

            <div className="bg-white p-6 rounded-lg shadow">
              <h2 className="text-xl font-semibold mb-4">Shipping Address</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700">First Name</label>
                  <input
                      type="text"
                      name="firstName"
                      required
                      value={formData.firstName}
                      onChange={handleInputChange}
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Last Name</label>
                  <input
                      type="text"
                      name="lastName"
                      required
                      value={formData.lastName}
                      onChange={handleInputChange}
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                  />
                </div>
                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700">Address</label>
                  <input
                      type="text"
                      name="address"
                      required
                      value={formData.address}
                      onChange={handleInputChange}
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">City</label>
                  <input
                      type="text"
                      name="city"
                      required
                      value={formData.city}
                      onChange={handleInputChange}
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Postal Code</label>
                  <input
                      type="text"
                      name="postalCode"
                      required
                      value={formData.postalCode}
                      onChange={handleInputChange}
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                  />
                </div>
              </div>
            </div>

            <div className="bg-white p-6 rounded-lg shadow">
              <h2 className="text-xl font-semibold mb-4">Payment Information</h2>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700">Card Number</label>
                  <input
                      type="text"
                      name="cardNumber"
                      required
                      value={formData.cardNumber}
                      onChange={handleInputChange}
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                  />
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Expiry Date</label>
                    <input
                        type="text"
                        name="expiryDate"
                        placeholder="MM/YY"
                        required
                        value={formData.expiryDate}
                        onChange={handleInputChange}
                        className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">CVV</label>
                    <input
                        type="text"
                        name="cvv"
                        required
                        value={formData.cvv}
                        onChange={handleInputChange}
                        className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                    />
                  </div>
                </div>
              </div>
            </div>

            <button
                type="submit"
                disabled={isProcessing}
                className={`w-full py-3 rounded-md transition text-white flex items-center justify-center space-x-2 ${
                    isProcessing ? 'bg-blue-400 cursor-wait' : 'bg-blue-600 hover:bg-blue-700'
                }`}
            >
              {isProcessing ? (
                  <>
                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                    <span>Processing...</span>
                  </>
              ) : (
                  <span>Place Order</span>
              )}
            </button>
          </form>

          {/* Order Summary */}
          <div className="bg-white p-6 rounded-lg shadow h-fit">
            <h2 className="text-xl font-semibold mb-4">Order Summary</h2>
            <div className="space-y-4 mb-4">
              {cart.map((item) => (
                  <div key={item.id} className="flex justify-between">
                    <span>{item.name} x {item.quantity}</span>
                    <span className="text-gray-600">{item.price}</span>
                  </div>
              ))}
            </div>
            <div className="border-t pt-4">
              <div className="flex justify-between font-semibold">
                <span>Total</span>
                <span>${cartTotal.toFixed(2)}</span>
              </div>
            </div>
          </div>
        </div>
      </div>
  );
};

export default CheckoutPage;
=====

File Name: CartPage.tsx
Full Path: /Users/mac/WebstormProjects/faster_shoes2/src/pages/CartPage.tsx

/**
 * File Name: CartPage.tsx
 * Full Path: /Users/mac/WebstormProjects/faster_shoes2/src/pages/CartPage.tsx
 */
import React from 'react';
import { X, Plus, Minus, ArrowRight } from 'lucide-react';
import { useCart } from '../context/CartContext';
import { useNavigate } from 'react-router-dom';

const CartPage = () => {
  const {
    cart,
    removeFromCart,
    updateQuantity,
    cartTotal,
    itemCount,
    processCheckout
  } = useCart();
  const navigate = useNavigate();

  const handleCheckout = () => {
    // DO NOT call processCheckout() hereonly do that in CheckoutPage
    // processCheckout();

    // Go to /checkout
    navigate('/checkout');
  };

  if (cart.length === 0) {
    return (
        <div className="container mx-auto px-4 py-16 text-center">
          <h1 className="text-3xl font-bold mb-8">Your Cart is Empty</h1>
          <p className="text-gray-600 mb-8">Add some items to your cart to get started!</p>
          <button
              onClick={() => navigate('/')}
              className="bg-blue-600 text-white px-8 py-3 rounded-md hover:bg-blue-700 transition"
          >
            Continue Shopping
          </button>
        </div>
    );
  }

  return (
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold mb-8">
          Shopping Cart ({itemCount} items)
        </h1>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <div className="lg:col-span-2">
            <div className="space-y-4">
              {cart.map((item) => (
                  <div key={item.id} className="flex items-center space-x-4 bg-white p-4 rounded-lg shadow">
                    <img src={item.image} alt={item.name} className="h-24 w-24 object-cover rounded" />
                    <div className="flex-1">
                      <h3 className="font-semibold text-lg">{item.name}</h3>
                      <p className="text-gray-600">{item.price}</p>
                      <div className="mt-2 flex items-center space-x-2">
                        <button
                            onClick={() => updateQuantity(item.id, item.quantity - 1)}
                            className="p-1 hover:bg-gray-100 rounded"
                        >
                          <Minus className="h-4 w-4" />
                        </button>
                        <span>{item.quantity}</span>
                        <button
                            onClick={() => updateQuantity(item.id, item.quantity + 1)}
                            className="p-1 hover:bg-gray-100 rounded"
                        >
                          <Plus className="h-4 w-4" />
                        </button>
                      </div>
                    </div>
                    <button
                        onClick={() => removeFromCart(item.id)}
                        className="p-2 hover:bg-gray-100 rounded"
                    >
                      <X className="h-5 w-5 text-gray-500" />
                    </button>
                  </div>
              ))}
            </div>
          </div>

          <div className="bg-white p-6 rounded-lg shadow h-fit">
            <h2 className="text-xl font-semibold mb-4">Order Summary</h2>
            <div className="space-y-2 mb-4">
              <div className="flex justify-between">
                <span>Subtotal</span>
                <span>${cartTotal.toFixed(2)}</span>
              </div>
              <div className="flex justify-between">
                <span>Shipping</span>
                <span>Free</span>
              </div>
              <div className="border-t pt-2 mt-2">
                <div className="flex justify-between font-semibold">
                  <span>Total</span>
                  <span>${cartTotal.toFixed(2)}</span>
                </div>
              </div>
            </div>
            <button
                onClick={handleCheckout}
                className="w-full bg-blue-600 text-white py-3 rounded-md hover:bg-blue-700 transition flex items-center justify-center space-x-2"
            >
              <span>Proceed to Checkout</span>
              <ArrowRight className="w-4 h-4" />
            </button>
          </div>
        </div>
      </div>
  );
};

export default CartPage;
=====

File Name: Sale.tsx
Full Path: /Users/mac/WebstormProjects/faster_shoes2/src/pages/Sale.tsx

import React from 'react';
import { Filter, Tag } from 'lucide-react';
import AddToCartButton from '../components/AddToCartButton';

const Sale = () => {
  const products = [
    {
      id: 'sprint-elite-x-sale',
      name: "Sprint Elite X",
      originalPrice: "$129.99",
      price: "$89.99",
      image: "https://images.unsplash.com/photo-1539185441755-769473a23570",
      discount: "30% OFF"
    },
    {
      id: 'air-comfort-pro-sale',
      name: "Air Comfort Pro",
      originalPrice: "$159.99",
      price: "$119.99",
      image: "https://images.unsplash.com/photo-1551107696-a4b0c5a0d9a2",
      discount: "25% OFF"
    },
    {
      id: 'urban-walker-sale',
      name: "Urban Walker",
      originalPrice: "$99.99",
      price: "$69.99",
      image: "https://images.unsplash.com/photo-1549298916-b41d501d3772",
      discount: "30% OFF"
    },
    {
      id: 'city-step-sale',
      name: "City Step",
      originalPrice: "$149.99",
      price: "$99.99",
      image: "https://images.unsplash.com/photo-1562183241-b937e95585b6",
      discount: "33% OFF"
    }
  ];

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="bg-red-600 text-white p-4 rounded-lg mb-8">
        <div className="flex items-center justify-center space-x-2">
          <Tag className="w-6 h-6" />
          <h2 className="text-2xl font-bold">Special Sale - Up to 33% OFF!</h2>
        </div>
      </div>

      <div className="flex justify-between items-center mb-8">
        <h1 className="text-3xl font-bold">Sale Items</h1>
        <button className="flex items-center space-x-2 px-4 py-2 border rounded-md">
          <Filter className="w-5 h-5" />
          <span>Filter</span>
        </button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-6">
        {products.map((product) => (
          <div key={product.id} className="bg-white rounded-lg shadow-md overflow-hidden relative">
            <div className="absolute top-4 right-4 bg-red-600 text-white px-3 py-1 rounded-full">
              {product.discount}
            </div>
            <img src={product.image} alt={product.name} className="w-full h-64 object-cover" />
            <div className="p-4">
              <h3 className="font-semibold text-lg">{product.name}</h3>
              <div className="flex items-center space-x-2 mt-1">
                <span className="text-gray-400 line-through">{product.originalPrice}</span>
                <span className="text-red-600 font-semibold">{product.price}</span>
              </div>
              <AddToCartButton product={product} />
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default Sale;
=====

File Name: Home.tsx
Full Path: /Users/mac/WebstormProjects/faster_shoes2/src/pages/Home.tsx

import React, { useEffect } from 'react';
import { Truck, Shield, RotateCcw } from 'lucide-react';
import { Link } from 'react-router-dom';
import AddToCartButton from '../components/AddToCartButton';
import { products } from '../data/products';

const Home = () => {
  const featuredProducts = products.slice(0, 3);

  // NEW: UseEffect to push data to dataLayer
  useEffect(() => {
    window.dataLayer = window.dataLayer || [];

    // UTT Landing Page event
    window.dataLayer.push({
      event: 'UTT_LandingPageView',
      page: 'HomePage',
    });

    // Identity event (with empty strings)
    window.dataLayer.push({
      event: 'identity',
      customerID: '',
      customerEmail: '',
    });
  }, []);

  return (
    <>
      {/* Hero Section */}
      <div className="relative h-[600px]">
        <img
          src="https://images.unsplash.com/photo-1542291026-7eec264c27ff"
          alt="Hero"
          className="w-full h-full object-cover"
        />
        <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center">
          <div className="text-center text-white">
            <h1 className="text-6xl font-bold mb-4">Faster Shoes</h1>
            <p className="text-xl mb-8">Run Faster. Dream Bigger.</p>
            <a href="#featured" className="bg-white text-black px-8 py-3 rounded-full font-semibold hover:bg-gray-100 transition inline-block">
              Shop Now
            </a>
          </div>
        </div>
      </div>

      {/* Features */}
      <div className="container mx-auto py-16 px-4">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          <div className="flex items-center space-x-4">
            <Truck className="w-8 h-8 text-blue-600" />
            <div>
              <h3 className="font-semibold">Free Shipping</h3>
              <p className="text-gray-600">On orders over $100</p>
            </div>
          </div>
          <div className="flex items-center space-x-4">
            <Shield className="w-8 h-8 text-blue-600" />
            <div>
              <h3 className="font-semibold">Secure Payment</h3>
              <p className="text-gray-600">100% secure payment</p>
            </div>
          </div>
          <div className="flex items-center space-x-4">
            <RotateCcw className="w-8 h-8 text-blue-600" />
            <div>
              <h3 className="font-semibold">Easy Returns</h3>
              <p className="text-gray-600">30 day return policy</p>
            </div>
          </div>
        </div>
      </div>

      {/* Featured Products */}
      <div id="featured" className="bg-gray-50 py-16">
        <div className="container mx-auto px-4">
          <h2 className="text-3xl font-bold mb-8">Featured Products</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {featuredProducts.map((product) => (
              <div key={product.id} className="bg-white rounded-lg shadow-md overflow-hidden">
                <Link to={`/product/${product.id}`}>
                  <img src={product.image} alt={product.name} className="w-full h-64 object-cover" />
                </Link>
                <div className="p-4">
                  <Link to={`/product/${product.id}`}>
                    <h3 className="font-semibold text-lg hover:text-blue-600 transition">{product.name}</h3>
                  </Link>
                  <p className="text-gray-600">{product.price}</p>
                  <AddToCartButton product={product} />
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* NEW: Test link to your Checkout Success page with a sample irclickid */}
      <div className="text-center my-8">
        <Link
          to="/checkoutSuccess?irclickid=test123"
          className="bg-blue-600 text-white px-8 py-3 rounded-md hover:bg-blue-700 transition"
        >
          Test Conversion with irclickid
        </Link>
      </div>
    </>
  );
};

export default Home;
=====

File Name: Mens.tsx
Full Path: /Users/mac/WebstormProjects/faster_shoes2/src/pages/Mens.tsx

import React from 'react';
import { Filter } from 'lucide-react';
import AddToCartButton from '../components/AddToCartButton';

const Mens = () => {
  const products = [
    {
      id: 'sprint-elite-x-mens',
      name: "Sprint Elite X",
      price: "$129.99",
      image: "https://images.unsplash.com/photo-1539185441755-769473a23570",
      category: "Running"
    },
    {
      id: 'air-comfort-pro-mens',
      name: "Air Comfort Pro",
      price: "$159.99",
      image: "https://images.unsplash.com/photo-1551107696-a4b0c5a0d9a2",
      category: "Casual"
    },
    {
      id: 'trail-blazer-mens',
      name: "Trail Blazer",
      price: "$189.99",
      image: "https://images.unsplash.com/photo-1542291026-7eec264c27ff",
      category: "Running"
    },
    {
      id: 'urban-walker-mens',
      name: "Urban Walker",
      price: "$99.99",
      image: "https://images.unsplash.com/photo-1549298916-b41d501d3772",
      category: "Casual"
    },
    {
      id: 'marathon-master-mens',
      name: "Marathon Master",
      price: "$199.99",
      image: "https://images.unsplash.com/photo-1556048219-bb6978360b84",
      category: "Running"
    },
    {
      id: 'street-style-pro-mens',
      name: "Street Style Pro",
      price: "$149.99",
      image: "https://images.unsplash.com/photo-1525966222134-fcfa99b8ae77",
      category: "Casual"
    }
  ];

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-3xl font-bold">Men's Shoes</h1>
        <button className="flex items-center space-x-2 px-4 py-2 border rounded-md">
          <Filter className="w-5 h-5" />
          <span>Filter</span>
        </button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-6">
        {products.map((product) => (
          <div key={product.id} className="bg-white rounded-lg shadow-md overflow-hidden">
            <img src={product.image} alt={product.name} className="w-full h-64 object-cover" />
            <div className="p-4">
              <span className="text-sm text-blue-600">{product.category}</span>
              <h3 className="font-semibold text-lg mt-1">{product.name}</h3>
              <p className="text-gray-600">{product.price}</p>
              <AddToCartButton product={product} />
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default Mens;
=====

File Name: ProductPage.tsx
Full Path: /Users/mac/WebstormProjects/faster_shoes2/src/pages/ProductPage.tsx

import React, { useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Star, ChevronDown, ChevronUp } from 'lucide-react';
import { products } from '../data/products';
import AddToCartButton from '../components/AddToCartButton';

const ProductPage = () => {
  const { productId } = useParams();
  const navigate = useNavigate();
  const [selectedSize, setSelectedSize] = useState<number | null>(null);
  const [selectedColor, setSelectedColor] = useState<string | null>(null);
  const [showSizes, setShowSizes] = useState(false);
  const [showDescription, setShowDescription] = useState(true);

  const product = products.find(p => p.id === productId);

  if (!product) {
    navigate('/');
    return null;
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        {/* Product Image */}
        <div className="relative">
          <img
            src={product.image}
            alt={product.name}
            className="w-full h-[500px] object-cover rounded-lg"
          />
          <span className="absolute top-4 left-4 bg-blue-600 text-white px-3 py-1 rounded-full">
            {product.category}
          </span>
        </div>

        {/* Product Details */}
        <div className="space-y-6">
          <div>
            <h1 className="text-3xl font-bold mb-2">{product.name}</h1>
            <div className="flex items-center space-x-2 mb-4">
              <div className="flex">
                {[...Array(5)].map((_, i) => (
                  <Star key={i} className="w-5 h-5 text-yellow-400 fill-current" />
                ))}
              </div>
              <span className="text-gray-600">(124 reviews)</span>
            </div>
            <p className="text-2xl font-bold text-blue-600">{product.price}</p>
          </div>

          {/* Color Selection */}
          <div>
            <h3 className="font-semibold mb-3">Color</h3>
            <div className="flex space-x-3">
              {product.colors.map(color => (
                <button
                  key={color.hex}
                  onClick={() => setSelectedColor(color.hex)}
                  className={`w-10 h-10 rounded-full border-2 ${
                    selectedColor === color.hex ? 'border-blue-600' : 'border-gray-300'
                  }`}
                  style={{ backgroundColor: color.hex }}
                  title={color.name}
                />
              ))}
            </div>
          </div>

          {/* Size Selection */}
          <div className="relative">
            <button
              onClick={() => setShowSizes(!showSizes)}
              className="w-full flex items-center justify-between border rounded-lg px-4 py-2"
            >
              <span>{selectedSize ? `Size: ${selectedSize}` : 'Select Size'}</span>
              {showSizes ? <ChevronUp className="w-5 h-5" /> : <ChevronDown className="w-5 h-5" />}
            </button>
            {showSizes && (
              <div className="absolute z-10 w-full mt-2 bg-white border rounded-lg shadow-lg">
                <div className="grid grid-cols-3 gap-2 p-4">
                  {product.sizes.map(size => (
                    <button
                      key={size}
                      onClick={() => {
                        setSelectedSize(size);
                        setShowSizes(false);
                      }}
                      className={`px-4 py-2 rounded ${
                        selectedSize === size
                          ? 'bg-blue-600 text-white'
                          : 'hover:bg-gray-100'
                      }`}
                    >
                      {size}
                    </button>
                  ))}
                </div>
              </div>
            )}
          </div>

          {/* Add to Cart */}
          <AddToCartButton product={product} />

          {/* Description */}
          <div>
            <button
              onClick={() => setShowDescription(!showDescription)}
              className="w-full flex items-center justify-between py-4 border-b"
            >
              <span className="font-semibold">Description</span>
              {showDescription ? <ChevronUp className="w-5 h-5" /> : <ChevronDown className="w-5 h-5" />}
            </button>
            {showDescription && (
              <div className="py-4 space-y-4">
                <p className="text-gray-600">{product.description}</p>
                <h4 className="font-semibold">Features:</h4>
                <ul className="list-disc pl-5 space-y-2">
                  {product.features.map((feature, index) => (
                    <li key={index} className="text-gray-600">{feature}</li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

export default ProductPage;
=====

File Name: Womens.tsx
Full Path: /Users/mac/WebstormProjects/faster_shoes2/src/pages/Womens.tsx

import React from 'react';
import { Filter } from 'lucide-react';
import AddToCartButton from '../components/AddToCartButton';

const Womens = () => {
  const products = [
    {
      id: 'flex-runner-womens',
      name: "Flex Runner",
      price: "$119.99",
      image: "https://images.unsplash.com/photo-1560769629-975ec94e6a86",
      category: "Running"
    },
    {
      id: 'cloud-step-womens',
      name: "Cloud Step",
      price: "$149.99",
      image: "https://images.unsplash.com/photo-1565814636199-ae8133055c1c",
      category: "Casual"
    },
    {
      id: 'sprint-light-womens',
      name: "Sprint Light",
      price: "$169.99",
      image: "https://images.unsplash.com/photo-1579338559194-a162d19bf842",
      category: "Running"
    },
    {
      id: 'city-walker-womens',
      name: "City Walker",
      price: "$89.99",
      image: "https://images.unsplash.com/photo-1562183241-b937e95585b6",
      category: "Casual"
    },
    {
      id: 'marathon-elite-womens',
      name: "Marathon Elite",
      price: "$189.99",
      image: "https://images.unsplash.com/photo-1539185441755-769473a23570",
      category: "Running"
    },
    {
      id: 'urban-chic-womens',
      name: "Urban Chic",
      price: "$139.99",
      image: "https://images.unsplash.com/photo-1551107696-a4b0c5a0d9a2",
      category: "Casual"
    }
  ];

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-3xl font-bold">Women's Shoes</h1>
        <button className="flex items-center space-x-2 px-4 py-2 border rounded-md">
          <Filter className="w-5 h-5" />
          <span>Filter</span>
        </button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-6">
        {products.map((product) => (
          <div key={product.id} className="bg-white rounded-lg shadow-md overflow-hidden">
            <img src={product.image} alt={product.name} className="w-full h-64 object-cover" />
            <div className="p-4">
              <span className="text-sm text-blue-600">{product.category}</span>
              <h3 className="font-semibold text-lg mt-1">{product.name}</h3>
              <p className="text-gray-600">{product.price}</p>
              <AddToCartButton product={product} />
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default Womens;
=====

File Name: CheckoutSuccess.tsx
Full Path: /Users/mac/WebstormProjects/faster_shoes2/src/pages/CheckoutSuccess.tsx

import React, { useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { Check } from 'lucide-react';

const CheckoutSuccess = () => {
    const navigate = useNavigate();
    const location = useLocation();

    useEffect(() => {
        window.dataLayer = window.dataLayer || [];

        // 1) UTT_ConversionPageView
        window.dataLayer.push({
            event: 'UTT_ConversionPageView',
            page: 'CheckoutSuccess',
        });

        // 2) Grab ?irclickid= from the URL or localStorage
        const searchParams = new URLSearchParams(location.search);
        let irclickid = searchParams.get('irclickid') || '';
        if (!irclickid) {
            irclickid = localStorage.getItem('irclickid') || '';
        }

        // 3) Also retrieve the real orderId and totalValue from localStorage
        const storedSummary = localStorage.getItem('orderSummary');
        let realOrderId = 'test-order';
        let realTotalValue = '0.00';

        if (storedSummary) {
            try {
                const parsed = JSON.parse(storedSummary);
                if (parsed.orderId) {
                    realOrderId = parsed.orderId; // e.g. "wg4nbvj9t"
                }
                if (typeof parsed.total === 'number') {
                    realTotalValue = parsed.total.toFixed(2); // e.g. "159.99"
                }
            } catch (err) {
                console.error('Failed to parse storedSummary:', err);
            }
        }

        // 4) Push impactConversion with the real order ID and total
        window.dataLayer.push({
            event: 'impactConversion',
            orderId: realOrderId,
            clickId: irclickid,     // from URL or localStorage
            totalValue: realTotalValue,
            currency: 'USD',
        });

        console.log('impactConversion event fired with ID:', irclickid);
        console.log('impactConversion orderId, totalValue:', realOrderId, realTotalValue);

        // Optionally clear that storedSummary if you don't want it to persist
        localStorage.removeItem('orderSummary');
    }, [location.search]);

    return (
        <div className="container mx-auto px-4 py-16 text-center">
            <div className="mb-8 text-green-500">
                <Check className="h-16 w-16 mx-auto" />
            </div>
            <h1 className="text-3xl font-bold mb-4">Order Confirmed!</h1>
            <p className="text-gray-600 mb-8">
                Thank you for your purchase. We'll send you an email with your order details shortly.
            </p>
            <button
                onClick={() => navigate('/')}
                className="bg-blue-600 text-white px-8 py-3 rounded-md hover:bg-blue-700 transition"
            >
                Continue Shopping
            </button>
        </div>
    );
};

export default CheckoutSuccess;
=====

